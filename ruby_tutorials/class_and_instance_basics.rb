# --------------------------------------------------------
# クラスとオブジェクト
# --------------------------------------------------------
# - Rubyはすべてのデータがオブジェクトとして扱われます。
# - クラス（Class）はオブジェクトの設計図であり、オブジェクトを作るために定義します。
# - インスタンス（Instance）はクラスを元に作成された具体的なオブジェクトです。

# --------------------------------------------------------
# 1. クラスとインスタンスの基本
# --------------------------------------------------------

# Animal クラスの定義
class Animal
  # インスタンスの初期化（コンストラクタ）
  def initialize(name)
    @name = name  # インスタンス変数
  end

  # メソッドの定義
  def speak
    "Hello, my name is #{@name}!"
  end
end

# インスタンスの作成とメソッドの呼び出し
dog = Animal.new("Buddy")
puts dog.speak  # => "Hello, my name is Buddy!"

# --------------------------------------------------------
# 2. クラスの継承
# --------------------------------------------------------
# - Rubyのクラスは継承を使用して親クラスの機能を引き継ぐことができます。
# - `class 子クラス < 親クラス` のように定義します。
# - メソッドをオーバーライド（再定義）することも可能です。

# Animalクラスを継承したDogクラス
class Dog < Animal
  def speak
    "Woof! I'm #{@name}!"
  end
end

dog = Dog.new("Charlie")
puts dog.speak  # => "Woof! I'm Charlie!"

# --------------------------------------------------------
# 3. 入れ子になったクラス（ネストクラス）
# --------------------------------------------------------
# - クラスの中に別のクラスを定義することができます。
# - 外側のクラスの名前を::（スコープ解決演算子）で指定してアクセスします。

class Outer
  class Inner
    def greet
      "Hello from Inner class!"
    end
  end
end

# ネストクラスのインスタンス化とメソッド実行
inner_obj = Outer::Inner.new
puts inner_obj.greet  # => "Hello from Inner class!"

# --------------------------------------------------------
# 4. オープンクラスとモンキーパッチ
# --------------------------------------------------------
# - Rubyのクラスは後からメソッドを追加・変更できます（オープンクラス）。
# - 既存のメソッドを上書きすることを「モンキーパッチ」と呼びます。

# 例1: 既存のStringクラスに新しいメソッドを追加（オープンクラス）
class String
  def shout
    self.upcase + "!!!"
  end
end

puts "hello".shout  # => "HELLO!!!"

# 例2: 既存のIntegerクラスの加算メソッドを変更（モンキーパッチ）
class Integer
  alias old_plus +  # 元の加算メソッドを保持

  def +(other)
    old_plus(other) * 2  # 加算結果を2倍にする
  end
end

puts 2 + 3  # => 10（元の 2 + 3 = 5 が 2 倍される）

# --------------------------------------------------------
# 5. ダックタイピング
# --------------------------------------------------------
# - Rubyは「型」ではなく「振る舞い」（メソッドを持っているかどうか）でオブジェクトを判断します。
# - 同じメソッドを持っていれば異なるクラスのオブジェクトでも同じように扱えます。

class Bird
  def speak
    "Chirp!"
  end
end

class Cat
  def speak
    "Meow!"
  end
end

# ダックタイピングを活用したメソッド
def make_sound(animal)
  puts animal.speak
end

bird = Bird.new
cat = Cat.new

make_sound(bird)  # => "Chirp!"
make_sound(cat)   # => "Meow!"

# --------------------------------------------------------
# まとめ
# --------------------------------------------------------
# - クラスはオブジェクトの設計図であり、インスタンスを生成できる。
# - 継承を利用することで、親クラスの機能を子クラスに引き継げる。
# - クラスの中に別のクラスを定義（ネストクラス）できる。
# - Rubyのオープンクラスを利用して既存のクラスを拡張できる。
# - モンキーパッチを使うと既存のメソッドを変更できるが、乱用は注意。
# - ダックタイピングにより、型を意識せずメソッドの有無でオブジェクトを扱える。

