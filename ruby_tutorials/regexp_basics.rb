# ----------------------------------------
# 正規表現（Regular Expression）とは？
# ----------------------------------------
# - 正規表現は、文字列のパターンマッチングを行うための強力なツールです。
# - 文字列の検索、置換、抽出などを効率的に行うことができます。
# - Rubyでは `Regexp` クラスを使用して正規表現を扱います。
# - `scan` メソッドを使うと、マッチするすべての部分文字列を配列として取得できます。
# - `/pattern/` の形式で正規表現を定義し、さまざまなメタ文字を利用できます。

# ----------------------------------------
# 正規表現の基本
# ----------------------------------------
text = "123 apple Banana ABC xyz"

# ----------------------------------------
# \d: 数字（0-9）の1文字にマッチ
# ----------------------------------------
puts text.scan(/\d/)  # => ["1", "2", "3"]  # 各数字を個別に取得

# ----------------------------------------
# {n,m}: 直前のパターンがn回以上m回以下繰り返される
# ----------------------------------------
puts text.scan(/\d{1,2}/)  # => ["12", "3"]  # 1～2桁の連続する数字を取得
puts text.scan(/\d{2}/)   # => ["12"]  # ちょうど2桁の数字を取得

# ----------------------------------------
# [AB]: 'A' または 'B' の1文字にマッチ
# ----------------------------------------
puts text.scan(/[AB]/)  # => ["B", "A", "A", "B", "C"]  # 'A' または 'B' に一致

# ----------------------------------------
# [a-z]: 小文字のアルファベットにマッチ
# ----------------------------------------
puts text.scan(/[a-z]/)  # => ["a", "p", "p", "l", "e", "x", "y", "z"]  # 小文字のアルファベットのみ取得

# ----------------------------------------
# ?: 直前のパターンが0回または1回にマッチ
# ----------------------------------------
puts text.scan(/ap?ple/)  # => ["apple"]  # "p"があってもなくてもよい

# ----------------------------------------
# .: 任意の1文字にマッチ
# ----------------------------------------
puts text.scan(/a.l/)   # => ["apl"]  # "a"と"l"の間に何か1文字があるもの

# ----------------------------------------
# +: 直前のパターンが1回以上繰り返される
# ----------------------------------------
puts text.scan(/\w+/)   # => ["123", "apple", "Banana", "ABC", "xyz"]  # 1文字以上の英数字を取得

# ----------------------------------------
# *: 直前のパターンが0回以上繰り返される
# ----------------------------------------
puts text.scan(/a.*/)   # => ["apple Banana ABC xyz"]  # "a" から始まるすべての文字列を取得

# ----------------------------------------
# \w: 英数字（a-z, A-Z, 0-9, _）の1文字にマッチ
# ----------------------------------------
puts text.scan(/\w/)  # => ["1", "2", "3", "a", "p", "p", "l", "e", "B", "a", "n", "a", "n", "a", "A", "B", "C", "x", "y", "z"]  # すべての英数字を取得

# ----------------------------------------
# [^AB]: 'A' または 'B' 以外の1文字にマッチ
# ----------------------------------------
puts text.scan(/[^AB]/)  # => ["1", "2", "3", " ", "a", "p", "p", "l", "e", " ", "n", "a", "n", "a", " ", " ", "x", "y", "z"]  # 'A' または 'B' 以外の文字を取得

# ----------------------------------------
# () を使ったキャプチャと置換
# ----------------------------------------
name_text = "John Doe, Jane Smith"
puts name_text.gsub(/(\w+) (\w+)/, '\\2, \\1')  # => "Doe, John, Smith, Jane"  # 名字と名前を入れ替える

# ----------------------------------------
# (?: ) を利用したキャプチャ無しのグループ化
# ----------------------------------------
color_text = "color colour"
puts color_text.scan(/colou?r/)  # => ["color", "colour"]  # "u" の有無に関係なく一致

# ----------------------------------------
# 特別な文字のエスケープ
# ----------------------------------------
price_text = "The price is $100.50!"
puts price_text.scan(/\$\d+\.\d+/)  # => ["$100.50"]  # "$" を含む価格を取得

# ----------------------------------------
# ^: 行の先頭にマッチ
# ----------------------------------------
puts text.scan(/^\d+/)  # => ["123"]  # 行の先頭にある数字を取得

# ----------------------------------------
# $: 行の末尾にマッチ
# ----------------------------------------
puts text.scan(/xyz$/)  # => ["xyz"]  # 行の末尾にある"xyz"を取得

# ----------------------------------------
# \s: 空白文字（スペース、タブ、改行）にマッチ
# ----------------------------------------
puts text.scan(/\s/)  # => [" ", " ", " "]  # 空白を取得

# ----------------------------------------
# \t: タブ文字にマッチ
# ----------------------------------------
puts "word1\tword2".scan(/\t/)  # => ["\t"]  # タブが含まれている

# ----------------------------------------
# \n: 改行文字にマッチ
# ----------------------------------------
puts "line1\nline2".scan(/\n/)  # => ["\n"]  # 改行が含まれている

# ----------------------------------------
# |: OR検索（いずれかのパターンにマッチ）
# ----------------------------------------
puts text.scan(/apple|Banana/)  # => ["apple", "Banana"]  # "apple" または "Banana" に一致

# ----------------------------------------
# ^ を文字クラス内で使うと「否定」を意味する
# ----------------------------------------
puts text.scan(/[^a-z]/)  # => ["1", "2", "3", " ", "B", "A", "A", "B", "C", " "]  # 小文字以外の文字を取得

# ----------------------------------------
# \b: 単語の境界にマッチ
# ----------------------------------------
puts text.scan(/\bapple\b/)  # => ["apple"]  # "apple" が単語の境界にある場合に一致

# ----------------------------------------
# 肯定の先読み (?=...)
# ----------------------------------------
puts text.scan(/\d(?= apple)/)  # => ["3"]  # "apple" の前にある数字を取得

# ----------------------------------------
# 否定の先読み (?!...)
# ----------------------------------------
puts text.scan(/\d(?! apple)/)  # => ["1", "2"]  # "apple" の前にない数字を取得

# ----------------------------------------
# 肯定の後読み (?<=...)
# ----------------------------------------
puts text.scan(/(?<=Banana) ABC/)  # => [" ABC"]  # "Banana" の後に続く "ABC" を取得

# ----------------------------------------
# 否定の後読み (?<!...)
# ----------------------------------------
puts text.scan(/(?<!Banana) ABC/)  # => []  # "Banana" の後ではない "ABC" を探す

# ----------------------------------------
# 後方参照
# ----------------------------------------
puts text.scan(/(\w+) \1/)  # => []  # 連続して繰り返す単語を取得

# ----------------------------------------
# メタ文字の複雑な組み合わせ
# ----------------------------------------
puts text.scan(/(a|b)+\d*/)  # => ["a123", "b", "a"]  # "a" または "b" が連続し、その後に数字が続く

# ----------------------------------------
# 正規表現とパフォーマンス (無駄なキャプチャを避ける)
# ----------------------------------------
puts text.scan(/(?:apple|Banana)/)  # => ["apple", "Banana"]  # キャプチャなしでマッチ

# ----------------------------------------
# メタ文字のエスケープ
# ----------------------------------------
puts text.scan(/\./)  # => []  # ピリオド（.）をエスケープ

# ----------------------------------------
# [] 内のメタ文字の働き
# ----------------------------------------
puts text.scan(/[.+*?]/)  # => []  # メタ文字をリテラルとして検索

# ----------------------------------------
# {n,} や {,n} の意味
# ----------------------------------------
puts text.scan(/\d{2,}/)  # => ["123"]  # 2回以上繰り返される数字を取得
puts text.scan(/\d{,2}/)  # => ["1", "2", "3"]  # 最大2回までの数字を取得

# ----------------------------------------
# \W: 非単語文字（英数字およびアンダースコア以外）にマッチ
# ----------------------------------------
puts text.scan(/\W/)  # => [" ", " ", " "]  # 空白のみが取得

# ----------------------------------------
# \S: 非空白文字にマッチ
# ----------------------------------------
puts text.scan(/\S/)  # => ["1", "2", "3", "a", "p", "p", "l", "e", "B", "a", "n", "a", "n", "a", "A", "B", "C", "x", "y", "z"]  # 空白以外の文字を取得

# ----------------------------------------
# \D: 非数字にマッチ
# ----------------------------------------
puts text.scan(/\D/)  # => [" ", "a", "p", "p", "l", "e", " ", "B", "a", "n", "a", "n", "a", " ", "A", "B", "C", " ", "x", "y", "z"]  # 数字以外の文字を取得

# ----------------------------------------
# \B: 単語の境界以外にマッチ
# ----------------------------------------
puts text.scan(/\Bz/)  # => ["z"]  # 単語の境界ではない "z" を取得

